import * as React from "react";
import MockApp from "../../fixtures/MockApp";
import BlogPost from "../entities/BlogPost";
import IndexPage from "./IndexPage";

export default { title: "Pages/IndexPage" };

export const Loaded = () => (
  <MockApp>
    <IndexPage
      bio={BIO}
      blogPosts={BLOG_POSTS}
      websitePurpose={WEBSITE_PURPOSE}
      bioLoading={false}
      blogPostsLoading={false}
      websitePurposeLoading={false}
    />
  </MockApp>
);

export const Loading = () => (
  <MockApp>
    <IndexPage
      bio={null}
      blogPosts={[]}
      websitePurpose={null}
      bioLoading
      blogPostsLoading
      websitePurposeLoading
    />
  </MockApp>
);

export const Unavailable = () => (
  <MockApp>
    <IndexPage
      bio={null}
      blogPosts={[]}
      websitePurpose={null}
      bioLoading={false}
      blogPostsLoading={false}
      websitePurposeLoading={false}
    />
  </MockApp>
);

const BIO = "Has five years of experience in Web Frontend, led the development of [Kaizen Ad](https://ja.kaizen-ad.com/) at the previous job, and moved from Tokyo, Japan, to Vancouver, Canada, in 2018.\n\n- Loves writing code closer to users. Experienced much of Web application development\n- Prefers `UI=F(S)` model such as [React](https://reactjs.org/) and [Flutter](https://flutter.dev/)\n- Writes readable code in a robust and flexible architecture. Try to make every code I changed better even for just a bit ([The Boy Scout Rule](https://www.oreilly.com/library/view/97-things-every/9780596809515/ch08.html))\n- Always learns new things to improve productivity\n- Used to work as a backend engineer before\n";

const WEBSITE_PURPOSE = "This website is my blog and also a place to experiment with Web frontend stuff. This website is Single Page Application made of React and does Dynamic Rendering to serve rendered HTML to Bots of search engines and social media. Please take a look at what I'm doing in the following posts:\n\n-  [Implementing Loading Placeholder with React Content Loader](https://www.kohei.dev/posts/react-content-loader?hl=en-US)\n-  [Applying Dark Mode on the Web](https://www.kohei.dev/posts/applying-dark-mode-on-the-web?hl=en-US)\n";

const BLOG_POSTS: BlogPost[] = [
  {
    "id": "react-content-loader",
    "createdAt": new Date("2020-01-05T08:22:35.718Z"),
    "lastModifiedAt": new Date("2020-01-12T20:31:17.695Z"),
    "title": "Implementing Loading Placeholder with React Content Loader",
    "summary": "I spent a year-end vacation to implement loading placeholders on this website. I’ll introduce it.",
    "body": "Happy New Year! I spent a year-end vacation to implement loading placeholders on this website. I’ll introduce it.\n\n**Loading placeholder** is an animated UI pattern that looks like the actual contents and is supposed to show during loading.\n\nProbably you know **Spinner**, which is traditional circle-shape loading animation. Since the loading placeholder is much similar to the actual contents, it can lead the users to look at the position where the contents show. Besides, it seamlessly animates from loading animation to the actual contents because its shape is the same as the actual ones.\n\n## React Content Loader\nI’ll introduce 📦 `react-content-loader`, which is a JavaScript library that lets you implement loading placeholders of SVG by clipping path and animated gradient.\n\n<EmbededLink url=\"https://github.com/danilowoz/react-content-loader\" />\n\n> Also there's **[egoist/vue-content-loader](https://github.com/egoist/vue-content-loader)** for Vue and **[ngneat/content-loader](https://github.com/ngneat/content-loader)** for Angular. Usage is the same.\n\nThere’s `<ContentLoader>` is exported. You will put `<rect>`s and `<circle>`s inside `<ContentLoader>`. You need to calculate the sizes and positions from the actual contents and apply them to `<rect>`. For example, this website's blogging post page during loading is like the following. You can make your device offline and change the language to try it.\n\n![Loading Placeholder Example](//images.ctfassets.net/2mfcuy3p355s/7oVtWb6lYFZ7S8tGE72RcG/86f15afd15b08262e21c3592eb9710ff/loading-placeholder2.png)\n\nGenerally, texts have a letter size (`font-size`) and line gap (`line-height`).    It's an excellent way to make being conscious of them.\n\nHaving said that, `<rect>` itself doesn't have `line-height`. Let's calculate `x` and `y` in considering of `font-size` and `line-height`. One way to think is like the following image:\n\n![Calculating the Layout for Loading Placeholder](//images.ctfassets.net/2mfcuy3p355s/2JCv40XkmJBQZ0YZFUU2XN/27d51693f3d370e01ce557e9bb5e650a/loading-placeholder.png)\n\nExpression in JSX is the following:\n\n```css\n/* blog post body css (just for an example, a little bit different from the actual) */\np {\n  font-size: 16px;\n  line-height: 1.75;\n}\n```\n\n```jsx\n// 1.75 line-height is 28px as converted\n// there's (28 - 16) / 2 = 6px margin at the top and bottom\n<ContentLoader>\n  {/* y = 6px because there's margin at the top of text */}\n  <rect x=\"0\" y=\"6px\" width=\"100%\" height=\"16px\" />\n\n  {/* y is previous line's y + 16px + 12px for line 2 and below */}\n  <rect x=\"0\" y=\"34px\" width=\"100%\" height=\"16px\" />\n  <rect x=\"0\" y=\"62px\" width=\"40%\" height=\"16px\" />\n</ContentLoader>\n```\n\n## Implemeting Dark Mode\n\nIt will decently look if you apply opacity to the fill colors. But when the background color is not pure black, you might feel something wrong. In fact, this website has a non-pure black background (`#11181f`), which is slightly blue. In this kind of case, it's a great idea applying different colors on `<stop>` in `<linearGradient>` element, which is SVG's fill-color definition.\n\n```css\n/* prefer to use CSS class instead of element-type selector in production */\nsvg > defs > linearGradient > stop:nth-of-type(2n) {\n  stop-color: #e0e4e9;\n}\n\nsvg > defs > linearGradient > stop:nth-of-type(2n + 1) {\n  stop-color: #eff2f4;\n}\n\n@media (prefers-color-scheme: dark) {\n  svg > defs > linearGradient > stop:nth-of-type(2n) {\n    stop-color: #1e2730;\n  }\n\n  svg > defs > linearGradient > stop:nth-of-type(2n + 1) {\n    stop-color: #2d3641;\n  }\n}\n```\n\nThis website uses Styled Components, so each reference to the elements is on `&` symbol. [Refer here.](https://github.com/axross/kohei.dev/blob/4b3e3308a451f6445b88571895037b5624ce220b/common/components/ContentLoader.tsx#L34-L54)\n\n## Making Responsive\n\nSVG is something like a vector image that can be embedded in HTML. Retaining aspect ratio changes unnaturally heights. Be careful things the following:\n\n- Set `width` and `height` of the elements that define fill colors such as `<rect>` or `<circle>` in percentage\n- Keep `viewBox` and  `preserveAspectRatio` in `<svg>` default\n- Calculate `height` and make it absolute value ([Sample code](https://github.com/axross/kohei.dev/blob/4b3e3308a451f6445b88571895037b5624ce220b/common/pages/BlogPostPage/ArticleLoader.tsx#L40-L47)) 。\n\n## Known Issue with `<base>`\n\nReact Content Loader uses `url()` to refer the definition of SVG clipping path and gradient. Therefore, it doesn't work well and shows black-filled boxes if you use `<base>` element because SVG cannot reach to those definitions by URL.\n\nThis behavior only happens in Safari. So you might feel this is Safari's bug. However, this is expected behavior in [SVG Working Group's opinion.](https://www.w3.org/2015/08/25-svg-minutes.html#item08) You can avoid this using `<ContentLoader>` component's `baseUrl` props or not using a `<base>` element.\n\n> When you are using Webpack, you can set `output.publicPath` and no longer need the `<base>` element in most cases.\n\n## Conclusion\n\n- Show loading placeholder to lead users' gaze during loading\n- Make loading placeholder imitate the actual contents to lead correctly\n\nBest wishes for 2020!\n"
  },
  {
    "id": "first-flutter-app-launch",
    "createdAt": new Date("2019-11-07T10:10:12.109Z"),
    "lastModifiedAt": new Date("2020-01-12T20:34:11.543Z"),
    "title": "Launched an app for Texas Hold'em Poker made of Flutter!",
    "summary": "Submitted iOS/Android apps made of Flutter to app stores for the first time. It's a tool to calculate win rates in Texas Hold'em poker.",
    "body": "I launched iOS/Android apps made of [Flutter](https://flutter.dev/) to app stores for the first time. It's a tool to calculate win rates for each hands or hand ranges up to 10 players.\n\n![Aqua](https://videos.ctfassets.net/2mfcuy3p355s/2WCN3uamkggk0Z9Nc9XMwr/04e281d037c5e32e6dc241cea1f96501/aqua_video__2___2_.mp4)\n\n## Download\n\n[![Get it on Google Play](https://images.ctfassets.net/2mfcuy3p355s/6SDbf9kI8c62otwgfhLQHs/aa194b97f5ebe1d7def23e0226bd943f/get-it-on-google-play.png)](https://play.google.com/store/apps/details?id=app.axross.aqua&hl=ja) [![Download on the App Store](https://images.ctfassets.net/2mfcuy3p355s/3Na9uTH1gjRLi6XsT53iTA/b53165822f5bf546eb297432a112b81c/download-on-the-app-store.png)](https://apps.apple.com/jp/app/odds-calculator-for-poker/id1485519383)\n\nThis app is open source. **It would be really grateful if you leave a review at the app stores or star in the GitHub repository.**\n\n<EmbededLink url=\"https://github.com/axross/aqua\" />\n\n## Implementation\nCalculation process is just Monte Carlo method, which is trying randomly certain times and get average of that. In the real poker game, players guess what kind of cards the opponents have. This application is for such situation, so it's really impossible to calculate all possibilities because the time complexity will be O(n^m) at least.\n\nEven the calculation in Monte Carlo method takes a lot of computation resource. You cannot do it in UI thread. So what I do is spawn a thread for calculation that communicates with UI thread. Flutter (if anything, Dart) has [Isolate](https://api.dartlang.org/stable/2.6.0/dart-isolate/dart-isolate-library.html), which is an abstract API for multi threading/processing. This app uses that.\n\n## Did it hard to launch Flutter app?\nNo. But I recommend you to have experience of both of iOS and Android development. Coding part is well-wrapped by Flutter, therefore, you don't need any knowledge about Java, Swift, Xcode, Android and something like that. But in order to submit the app to the app stores, you will need to know about signing the app with a certification, minifying the app, building the app for each architecture of devices.\n\n### Multithreading\nIsolate is really easy to use. As long as you want to do some simple multithreading, you will suffer from nothing. Isolate has some restriction in good way, so that it is on safe and simple API, also stands as guideline like as Golang's Goroutine.\n\n### Animation\nFlutter supports sequence animations and tween animations.\n\n![Flutter Tween Animation Example](https://videos.ctfassets.net/2mfcuy3p355s/4jPAo53HynNcYyE32mgJhV/1f83b17f483853f2bb903cd61ec05043/RPReplay_Final1574145129__2___1_.mp4) ![Flutter Tween Animation Example](https://videos.ctfassets.net/2mfcuy3p355s/5bER0UCiqkHJH1JyOx7f38/903960c488a9f719f6ab3063b51adfe4/RPReplay_Final1574145112__2___1_.mp4)\n\nI didn't implement so complicated animation, but I feel animation in Flutter is much easier and more familiar than DOM's. Because Flutter's rendering is high performance and any property of UI is able to be used in animation.\n\n### Dark mode\nFlutter has [MediaQuery](https://api.flutter.dev/flutter/widgets/MediaQuery-class.html) API, which enables to obtain device information and OS settings such as:\n\n- Display metrics and orientation\n- Whether bold fonts are preferred (iOS)\n- Whether 24-hour time format is used\n\nFlutter has [InheritedWidget](https://api.flutter.dev/flutter/widgets/InheritedWidget-class.html) that is same propagation model with [React's context](https://reactjs.org/docs/context.html). MediaQuery is on that. So you really easily can apply dark mode depending on users' OS setting to UI.\n\n![Aqua Light Theme](https://images.ctfassets.net/2mfcuy3p355s/4wUlHSe9lu5HIhSp2l4Nu7/dcf69db200084b28f4b1b029d38e1691/light-theme__2___2_.png) ![Aqua Dark Theme](https://images.ctfassets.net/2mfcuy3p355s/42s0jUhzGUqahmL9VKjfIs/d6a2363592888fd606c293342eacb4a1/dark-theme__2___1_.png)\n\n## What Flutter isn't good for?\n### Using ads\nFlutter doesn't use platform's original UI framework at all. Instead of that, Flutter mounts a canvas to entire the screen and renders UI with its own rendering system. Therefore, sometimes Flutter's rendering performance exceeds native's one. However, as for ads, it's not really good with Flutter because usually they serves a SDK that is implemented on native UI framework.\n\n### Using camera\nCamera is also in the same situation. If you want to make camera apps such as Instagram or Snapchat, it's also quite hard. Because Flutter doesn't support camera by itself. In order to use camera, you'll call native API and it will rendered on native UI framework.\n"
  },
  {
    "id": "applying-dark-mode-on-the-web",
    "createdAt": new Date("2019-08-25T05:22:14.955Z"),
    "lastModifiedAt": new Date("2020-01-12T20:33:11.243Z"),
    "title": "Applying Dark Mode on the Web",
    "summary": "Dark mode is still not common so far, on the other hand, it's getting more common since macOS supports it in 2018. Nowadays, most major OSs has this feature. I describe how to let your websites support dark mode and what you need to do for it.",
    "body": "I just implemented Dark Mode on this website.\n\n## What's Dark Mode?\n\n**Dark Mode** is a new OS setting that changes UI to the black-color background. This page is supposed to show in the dark-color background for the users who turned on the dark mode at OS settings.\n\n![Light](//images.ctfassets.net/2mfcuy3p355s/1QLScpRghydxrZ92KWMFiy/0b69f0730ff73474a375ffe5c2e72c22/www.kohei.dev_posts_applying-dark-mode-on-the-web_hl_en-US__1_.png) ![Dark](//images.ctfassets.net/2mfcuy3p355s/412X21CMcEJ1KE9IXSIWRH/f1f971a5571a4f01735c762867e2e85a/www.kohei.dev_posts_applying-dark-mode-on-the-web_hl_en-US.png)\n\n### Dark Mode is Accessibility\n\nThe Dark Mode is not only \"color setting\". The Dark Mode is an accessibility feature that shows in the color what the user requested.\n\nEven if the user OS shows UI in dark color and only your website shows UI in white color, it's not user-friendly. Besides, it could make the user's eyes under somewhat stress.\n\n![Dark mode setting in macOS Catalina](//images.ctfassets.net/2mfcuy3p355s/5xnylcktuc9rkbojABpZNh/536ea984c929d8fadbf6b794c93fe473/Screen_Shot_2019-08-23_at_23.29.36-optimized.png)\n\nLatest iOS and macOS has automatic dark mode setting. It enables dark mode during the night. Same as Night Light or Night Shift, which is the feature to change display color temperature from sunset to sunrise, it's going to adjust to our life.\n\n### Dark Mode helps the battery lasts longer\n\nA lot of new mobile devices use [OLED displays](https://en.wikipedia.org/wiki/OLED). OLED displays are consist of self-light cells instead of using the backlight. So as color is darker, the battery usage is less. According to Google's research, dark mode reduces battery usages by more than 50%.\n\n<EmbededLink url=\"https://www.gsmarena.com/google_finds_night_mode_really_helps_battery_endurance-news-34134.php\" />\n\n## Implementing Dark Mode\n\nYou can detect if the Dark Mode is enabled (requested) by a Media Query [`prefers-color-scheme`](https://developer.mozilla.org/ja/docs/Web/CSS/@media/prefers-color-scheme). With the following code, the background color will be `#000` when the Dark Mode is on, otherwise `#fff`.\n\n```css\nhtml {\n  background-color: #fff;\n}\n\n@media (prefers-color-scheme: dark) {\n  html {\n    background-color: #000;\n  }\n}\n```\n\nI recommend you to define the color scheme first of all. In the real world, you will need to prepare colors for each text, icons, background colors, border colors, and drop shadows for buttons and text inputs and something like that.\n\n## Detect in JavaScript\n\nYou can use [`window.matchMedia()`](https://developer.mozilla.org/ja/docs/Web/API/Window/matchMedia) to detect if the Dark Mode is on.\n\n```js\n// true when dark mode is on, false otherwise\nwindow.matchMedia(\"(prefers-color-scheme: dark)\").matches\n```\n\nTo observe switching Dark Mode, use `.addEventListener()` method of [`MediaQueryList`](https://developer.mozilla.org/ja/docs/Web/API/MediaQueryList), which is return value of `window.matchMedia()`. The following example shows how to observe and give it to the descendant components in React.\n\n```jsx\nconst DarkModeContext = React.useContext();\n\nfunction DarkModeProvider({ children }) {\n  const [isDarkMode, setIsDarkMode] = React.useState(false);\n\n  React.useEffect(() => {\n    // get MediaQueryList for \"prefers-color-scheme: dark\"\n    const mediaQueryList = window.matchMedia(\"(prefers-color-scheme: dark)\");\n\n    // event handler that is used below\n    // e.matches is true when the dark mode is on, false otherwise\n    const listener = e => setDarkMode(e.matches);\n\n    // it triggers the change event whenever dark mode switches\n    mediaQueryList.addEventListener(\"change\", listener);\n\n    // unobserve from change event when this component gets unmounted\n    () => mediaQueryList.removeEventListener(\"change\", listener);\n  });\n\n  // pass if the dark mode is on to the descendants\n  return (\n    <DarkModeContext.Provider value={isDarkMode}>\n      {children}\n    </DarkModeContext.Provider>\n  );\n}\n\nfunction SomeComponent() {\n  // get boolean value via the context\n  const isDarkMode = React.useContext(DarkModeContext);\n  \n  return isDarkMode ? <AnotherDarkComponent /> : <AnotherLightComponent />;\n}\n```\n\n> **Notice**  \n>   \n> This code is not good for server side rendering.\n> \n> Because Dark Mode is on device or OS's setting. So it's impossible to get the setting during rendering in the server.\n> \n> You need to use CSS `@media` for the websites that is rendered in the server.\n\n## Compatibility\n\nAll modern browsers except for Edge supports Dark Mode. Of course Internet Explorer doesn't support it.\n\n![prefers-color-scheme Compatibility](https://images.ctfassets.net/2mfcuy3p355s/4WVpR09sLr1Nz1CYuq5fU5/f448de9740edb6c46f9af64a14683b3c/Screen_Shot_2019-08-24_at_21.55.03-optimized.png)\n\n## Related Links\n\n<EmbededLink url=\"https://web.dev/prefers-color-scheme\" />\n"
  },
  {
    "id": "7-tips-of-next-js-9-with-typescript",
    "createdAt": new Date("2019-08-02T00:35:08.286Z"),
    "lastModifiedAt": new Date("2019-11-26T05:34:06.509Z"),
    "title": "7 Tips of Next.js 9 with TypeScript",
    "summary": "Here is tips what I run into and new thought about Next.js with TypeScript on the way for making this website.",
    "body": "The previous time I went over, Next.js was version 7 or 8, I guess. There was a lot of workarounds neccessary and I didn’t feel it worth and gave up to use it because of the cost for workarounds and the outcome from the framework didn't balance. Recently I needed to research how good Next.js 9 is and I made this website using it in order to go over. Here is tips what I run into throughout making this website.\n\n## Next.js is now TypeScript\nBasically Next.js 9 is fully typed. Before this, you needed to install a plugin to use TypeScript and add a few configs in `next.config.js` and `.babelrc`. But now you need nothing. Next.js 9 looks totally TypeScript! In fact, there’s Babel is running backside, but you almost never need to care it.\n\n> `\"esModuleInterop\": true` in `tsconfig.json` is supposed to be set for Babel, however, it will be automatically added if it’s not set. \n\n## Write “universal” code in general and “isomorphic” code in `getInitialProps()`\nAll code you wrote will run on both of browsers and Node. At the initial access for each route component, it runs on Node from `getInitialProps()` as its starting point. After it’s served as a client-side code, it runs as a single page application, which means each route component runs on the browser from `getInitialProps()`. Therefore, **everything in Next.js is supposed to be “universal”.**\n\n> **Universal**: Not dependent to the platform. No reference to APIs only available on browsers or Node such as `window` nor `require(\"fs\")` . Only using JavaScript’s standard APIs.\n> \n> **Isomorphic**: Runs on both of browsers and Node but the code is not universal. Even like it refers to `window`, it checks whether it’s available (e.g. `if (typeof window !== \"undefined\")`). Use another way to do something equivalent if it’s not unavailable.\n\nHowever, `getInitialProps()` has arguments `req` and `res` when it’s called for server-side rendering. **You can distinguish the running platform and fill the difference. This is “isomorphic”.** Here is the code to detect user’s locale isomorphicly (I wrote this for the website but I didn’t use for some reason eventually):\n\n```typescript\nimport * as http from 'http';\nimport { NextPageContext } from 'next';\n\nSomePageRoute.getInitialProps = ({ req } :NextPageContext) => {\n  const locale = decideLocale(req);\n}\n\n// returns the most desired locale\nfunction decideLocale(req?: http.IncommingMessage): string {\n  if (req) {\n    // access to HTTP request headers if there's req\n    const acceptLanguage = req.headers[\"accept-language\"];\n\n    if (acceptLanguage) {\n      const requestedLocales = acceptLanguage.split(\",\").map(part => {\n        const [locale, priority] = part.trim().split(\";q=\");\n\n        return { locale, priority: parseInt(priority) };\n      });\n\n      // sort requested locales by their priority\n      requestedLocales.sort((a, b) => b.priority - a.priority);\n\n      return requestedLocales.find(({ locale }) => locale !== '*') || DEFAULT_LOCALE;\n    }\n  }\n\n  if (typeof navigator !== 'undefined') {\n    // navigator is only available on the browser\n    return navigator.languages[0]\n  }\n\n  return DEFAULT_LOCALE;\n}\n\nconst DEFAULT_LOCALE = \"en-US\"\n```\n\n## Must create `_document.tsx` and `_app.tsx`\nThere two are supposed to be placed in `pages/`, however, these are not routes. You can create `_document.tsx` to change the output HTML structure. Every route components are going to be wrapped by `<App>` component by creating `_app.tsx`.\n\n**The default output of Next.js doesn’t have `<html>`’s `lang` attribute.** You need to set it by yourself ([example](https://github.com/axross/axross.dev/blob/9a396055f59a8ef8428b80b3682a38afb33c351d/pages/_document.tsx#L21)). In addition, I recommend you to add `<meta>` elements exactly same throughout every route such as `<meta name=\"viewport\" >` and `<meta name=\"theme-color\" >` there (if you want to set `<meta>` elements individually, you can use Next.js’s `<Head>` component).\n\n```tsx\nimport * as React from \"react\";\nimport Document, { DocumentContext, Html, Head, Main, NextScript } from \"next/document\";\n\ninterface Props {\n  locale: \"en-US\" | \"ja-JP\";\n}\n\nclass CustomDocument extends Document<Props> {\n  render() {\n    return (\n      <Html lang={this.props.locale.split(\"-\")[0]}>\n        <Head>\n          <meta name=\"viewport\" content=\"width=device-width,height=device-height\" key=\"viewport\" />\n          <link rel=\"shortcut icon\" href=\"/static/shortcut-icon.png\" key=\"shortcutIcon\" />\n          <meta name=\"theme-color\" content=\"#087da1\" key=\"themeColor\" />\n        </Head>\n\n        <body>\n          <Main />\n\n          <NextScript />\n        </body>\n      </Html>\n    );\n  }\n}\n\nexport default CustomDocument;\n```\n\n`_app.tsx` is useful to mount some common element throughout every page such as navigation bars. Furthermore, **it’s also best way to provide certain objects to descendants by [React  Context](https://reactjs.org/docs/context.html) (this is well-known pattern to make dependency injection).** I supply descendant components “current locale“, “placeholder text for translation” and something like that ([example](https://github.com/axross/axross.dev/blob/9a396055f59a8ef8428b80b3682a38afb33c351d/pages/_app.tsx#L21-L47)). Here is also the example code for the case that you make a web application and provide “authentication state”.\n\n```tsx\nimport * as React from \"react\";\nimport NextApp, { AppContext, Container } from \"next/app\";\nimport Session from \"(somewhere...)\";\nimport getAuthenticationSession from \"(somewhere...)\";\n\ninterface Props {\n  session: Session;\n  pageProps: any;\n}\n\nclass App extends NextApp<Props> {\n  render() {\n    const { session, pageProps, Component } = this.props;\n\n    return (\n      <Container>\n        <SessionContext.Provider value={session}>\n          <Component {...pageProps} />\n        </SelfUrlContext.Provider>\n      </Container>\n    );\n  }\n\n  static async getInitialProps({ Component, ctx }: AppContext) {\n    const componentGetInitialProps = Component.getInitialProps || (() => Promise.resolve());\n\n    const [session, pageProps] = await Promise.all([\n      getAuthenticationSession(),\n      componentGetInitialProps(ctx),\n    ]);\n\n    return {\n      session,\n      pageProps\n    };\n  }\n}\n\nexport default App;\n```\n\n## Don’t rely on useful API Routes so much\n`/pages/api/*.tsx` are special routes. They don’t have React component to render but can have implementation what HTTP response they return. Which means you can create Web API endpoints with that as like making Web servers .\n\nEven though you can make “full”-stack web application with both aspect of client-side and server-side, it’s not so great idea. If you make so many Web API endpoints with API routes, it will result in super messy code because you need to carefully write universal code everywhere with Next.js.\n\nWhat I recommend is using API routes less. You should use it just to support front-ends. Even like you write Web API endpoints in Node, it’s much better if you build a simple Node API server with [Fastify](https://www.fastify.io/), [Koa](https://koajs.com/) or [Express](https://expressjs.com/). **Because you don’t need to concern about the bundle size for the client-side code as well as there’s less restriction of the platform.**\n\n## Able to serve Sitemap and RSS/Atom feeds\n`pages/sitemap.xml.tsx` is exposed as `/sitemap.xml` as the endpoint. In addition, you can control what the endpoint responds for HTTP in `getInitialProps()` by doing `res.send()` ([example](https://github.com/axross/axross.dev/blob/9a396055f59a8ef8428b80b3682a38afb33c351d/pages/sitemap.xml.ts#L66-L68)). As React component, you can just return `null` because **no route can be reached in client-side rendering as long as it is not specified by `<Link>`.** This feature enables you to serve Sitemaps or RSS/Atom feeds (As an example, [here](https://axross.dev/posts/feed.xml?hl=ja-JP) is Atom feed of this website).\n\n## Consider to use singleton\n\n`pages/_app.tsx` is only the module every route passes. You may come up with some idea that it looks a great idea to prepare dependency injection container there and provide it to each route by React's props or contexts. But you need to remember that every page will be in server-side rendering and then going to be application entry point for the single-page application. If you put everything necessary in all routes, **Next.js cannot split code into small pieces of application endpoint. This makes huge overhead in the bundle size as well as cause the server-side rendering slow.**\n\nConsider that make modules refers dependencies directly or make some singleton object and make it imports dependencies as less as possible. Even in that case, there's no problem because fortunately most test frameworks have ways to mock modules.\n\n## Does Next.js only run on Now?\n\nThe answer is \"No”. ZEIT, which has [Now](https://zeit.co/now), develops and maintains Next.js as a core team. Surely Now has something like preset for Next.js. Moment after you push your Next.js application to Now, __each `pages/**/*.tsx` will be separately deployed as cloud functions automatically. When you go to some route by a browser, the cloud function runs, do server-side rendering and respond rendered HTML and JS.__ It works really well.\n\nMy second question was “how about Google Cloud Platform? Amazon Web Services? Netlify?”. The answer is you need to manage it by yourself. Next.js supports making custom single endpoint for server-side in Next.js. It would be the best way for GCP and AWS. As for Netlify, you can generate a normal web application by `next export`, deploy it to Netlify, and it works as a normal single page application. In this case, you cannot do dynamic server-side rendering with `getInitialProps()`.\n\n## Conclusion\nNext.js 9 is pretty nice. It's the best way to create both of web applications and websites without anything struggling.\n\nIf you can use Now, there is almost no configuration to make web applications working stunningly well. Even if you cannot use Now, you can use Next.js without server-side rendering. Even in this case, this enough worth as considering that the framework includes routing, `<head>` manipulation, static file serving, CSS in JS and Webpack configuration."
  },
  {
    "id": "made-ssr-i18n-website",
    "createdAt": new Date("2019-07-28T06:15:11.199Z"),
    "lastModifiedAt": new Date("2019-12-09T23:32:54.554Z"),
    "title": "I made a SSR-ed personal website with \"full\" i18n!",
    "summary": "I made a SSR-ed personal website with i18n in the latest Next.js. This post describes what I did for it briefly.",
    "body": "Hi, I'm Kohei from Japan and recently moved to Vancouver, Canada. I just made my personal website international because I plan to work here for a long time. As one more reason, it's quite unclear what/how Medium goes, so I will write my blog posts here from now on.\n\n## What I did\n\n### Using Next.js 9\n\n[Since version 9 Next.js supports TypeScript without any configuration.](https://nextjs.org/blog/next-9) That makes us really comfortable to write TypeScript. That's why I use Next.js for this website and every endpoint is rendered in the server for each request. Before version 9, we need to install additional plugins for Next.js projects to use TypeScript and it requires also to edit `.babelrc`. But now, even the core of Next.js is written in TypeScript, that sounds Next.js is gradually moving to use TypeScript natively.\n\n### Contentful as content backend\n\nThis website uses [Contentful](https://www.contentful.com/), which is headless CMS as a content backend. Headless CMS is content management system that is without frontend. You can use it as Web APIs with static site generators such as [Gatsby](https://www.gatsbyjs.org/) and [Hugo](https://gohugo.io/), or frontend Web application which is you made by yourself. There's already Wordpress and [Ghost](https://ghost.org/) have Web API mode in your surroundings. Briefly, this website works like the following diagram:\n\n![How this website translate itself](https://images.ctfassets.net/2mfcuy3p355s/31QkCtwBfoFCbsAV6UqcA3/0d5f3c0543e3bb96214e9cfcecb2283a/diagram.png)\n\nThere's only blog posts and a few of profile text is managed there so far, but I plan to store much more data like my works there.\n\n### \"Full\" i18n (I-nternationalizatio-n)\n\nLiturally everything in this website is translated, [OGP](https://ogp.me/), [linking data (Schema.org)](https://schema.org/) RSS and sitemap as well as text, UI labels and blog posts! These metadata and meta files are served in English if you request it in English, or response is Japanese if you access it in Japanese.\n\n|English|Japanese|\n|:---:|:---:|\n|![HTTP response in English](https://images.ctfassets.net/2mfcuy3p355s/2yVKAAzulJ7lK8RtPMxfoT/c924fe8b77563d415ebf104317ff564e/Screen_Shot_2019-07-27_at_23.18.39-optimized.png)|![HTTP response in Japanese](https://images.ctfassets.net/2mfcuy3p355s/3E8S99mwQAToTnTvtbvJnT/1e8674f77226add86068dcc8316a4b63/Screen_Shot_2019-07-27_at_23.18.59-optimized.png)|\n\n#### RSS feed preview in Feedly\n\n![Screen Shot 2019-07-29 at 16.00.38-optimized](https://images.ctfassets.net/2mfcuy3p355s/3Nu2o2jnJRZTJMA2LqdwvX/f7f876c14e65cad3dbaf478327690070/Screen_Shot_2019-07-29_at_16.00.38-optimized.png)\n\n### Perfect score at Lighthouse\n\nI tested the website in Lighthouse with the setting \"Throttling: Simulated Dast 3G, 4x CPU Slowdown\" for both of desktop and mobile, the score is perfect!\n\n|Desktop|Mobile|\n|:---:|:---:|\n|![Perfect score at Lighthouse (desktop)](https://images.ctfassets.net/2mfcuy3p355s/2T39CviRi7Hn0TYskVujWq/c99eb1da38232ef776e5da249a1281ab/Screen_Shot_2019-07-29_at_02.17.57-optimized.png)|![Perfect score at Lighthouse (mobile)](https://images.ctfassets.net/2mfcuy3p355s/63hDxWDYmGJuTHwJe9A2Wp/9379999bc418ee432166d024210fbf05/Screen_Shot_2019-07-29_at_02.15.41-optimized.png)|\n\n> **Aug 26th, 2019 Added:**\n> \n> This website is now not always the perfect score due to:\n> - Syntax highlighting reduces accessibility score\n> - Images reduce performance score\n>     - Possible to solve using WebP but Safari still doesn't support\n\n## What I do next\n\nI started to test Next.js 9 in the beginning and then it results I made this website eventually. I made the place to write, the next task is making habit to write.\n\n[Here is the source code.](https://github.com/axross/axross.dev) Take a look and star it if you are interested!"
  }
];
